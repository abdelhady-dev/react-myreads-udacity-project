{"version":3,"sources":["BookList.js","BooksAPI.js","SearchBooks.js","App.js","index.js"],"names":["BookList","_this$props","this","props","books","update","react_default","a","createElement","className","map","book","shelf","key","id","imageLinks","style","width","height","backgroundImage","concat","thumbnail","value","onChange","event","target","disabled","title","authors","author","react_router_dom","to","Component","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SearchBooks","state","booksResult","updateShelf","_this","setState","currentSatate","bs","BooksAPI","b","setBooks","updateQuery","booksSearch","Array","isArray","showingResult","_this2","_this$state","type","placeholder","BooksApp","newBooks","_this3","react_router","exact","path","render","src_BookList","src_SearchBooks","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d8b55d6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass BookList extends Component {\n\n    \n\n    render() {\n        const { books, update } = this.props\n\n        return (    \n            <div className='list-books'>\n        \n                {/* header */}\n                <div className='list-books-title'>\n                    <h1>MyReads</h1>\n                </div>\n                {/* header */}\n\n                {/* list */}\n                <div className='list-books-content'>\n                    \n                    <div>\n                        \n                        {/* Currently Reading */}\n                        <div className=\"bookshelf\">\n                            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                            <div className=\"bookshelf-books\">\n                                <ol className=\"books-grid\">\n                                    {books.map( (book) => (\n                                        book.shelf === \"currentlyReading\" && (\n                                            <li key={book.id}>\n                                                <div className=\"book\">\n                                                    <div className=\"book-top\">\n                                                        {book.imageLinks && (\n                                                            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\n                                                        )}\n                                                        <div className=\"book-shelf-changer\">\n                                                            <select value={book.shelf} onChange={(event) => update(event.target.value, book)}>\n                                                                <option value=\"move\" disabled>Move to...</option>\n                                                                <option value=\"currentlyReading\">Currently Reading</option>\n                                                                <option value=\"wantToRead\">Want to Read</option>\n                                                                <option value=\"read\">Read</option>\n                                                                <option value=\"none\">None</option>\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"book-title\">{book.title}</div>\n                                                    <div className=\"book-authors\">\n                                                        {book.authors && (\n                                                            book.authors.map((author) => (\n                                                                <div key={author}>{author}</div>\n                                                            ))\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        )\n                                    ))}  \n                                    \n                                </ol>\n                            </div>\n                        </div>\n                        {/* Currently Reading */}\n\n                        {/* Want to Read */}\n                        <div className=\"bookshelf\">\n                            <h2 className=\"bookshelf-title\">Want to Read</h2>\n                            <div className=\"bookshelf-books\">\n                                <ol className=\"books-grid\">\n                                    {books.map( (book) => (\n                                        book.shelf === \"wantToRead\" && (\n                                            <li key={book.id}>\n                                                <div className=\"book\">\n                                                    <div className=\"book-top\">\n                                                        {book.imageLinks && (\n                                                            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\n                                                        )}  \n                                                        <div className=\"book-shelf-changer\">\n                                                            <select value={book.shelf} onChange={(event) => update(event.target.value, book)}>\n                                                                <option value=\"move\" disabled>Move to...</option>\n                                                                <option value=\"currentlyReading\">Currently Reading</option>\n                                                                <option value=\"wantToRead\">Want to Read</option>\n                                                                <option value=\"read\">Read</option>\n                                                                <option value=\"none\">None</option>\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"book-title\">{book.title}</div>\n                                                    <div className=\"book-authors\">\n                                                        {book.authors && (\n                                                            book.authors.map((author) => (\n                                                                <div key={author}>{author}</div>\n                                                            ))\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        )\n                                    ))}  \n                                    \n                                </ol>\n                            </div>\n                        </div>\n                        {/* Want to Read */}\n                \n                        {/* Read */}\n                        <div className=\"bookshelf\">\n                            <h2 className=\"bookshelf-title\">Read</h2>\n                            <div className=\"bookshelf-books\">\n                                <ol className=\"books-grid\">\n                                    {books.map( (book) => (\n                                        book.shelf === \"read\" && (\n                                            <li key={book.id}>\n                                                <div className=\"book\">\n                                                    <div className=\"book-top\">\n                                                        {book.imageLinks && (\n                                                            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\n                                                        )}\n                                                        <div className=\"book-shelf-changer\">\n                                                            <select value={book.shelf} onChange={(event) => update(event.target.value, book)}>\n                                                                <option value=\"move\" disabled>Move to...</option>\n                                                                <option value=\"currentlyReading\">Currently Reading</option>\n                                                                <option value=\"wantToRead\">Want to Read</option>\n                                                                <option value=\"read\">Read</option>\n                                                                <option value=\"none\">None</option>\n                                                            </select>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"book-title\">{book.title}</div>\n                                                    <div className=\"book-authors\">\n                                                        {book.authors && (\n                                                            book.authors.map((author) => (\n                                                                <div key={author}>{author}</div>\n                                                            ))\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        )\n                                    ))}  \n                                    \n                                </ol>\n                            </div>\n                        </div>\n                        {/* Read */}\n\n                    </div>\n\n                </div>\n                {/* list */}\n                \n                {/* open search */}\n                <div className=\"open-search\">\n                    \n                        <Link\n                            to='/search'\n                        >\n                            <button>Add a book</button>\n                        </Link>\n                    \n                </div>\n                {/* open search */}\n                \n            </div>\n        )\n    }\n}\n\nexport default BookList;","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI'\nimport { Link } from 'react-router-dom'\nclass SearchBooks extends Component {\n    \n    state = {\n        query: '',\n        booksResult: []\n    }\n    // update shelf in search page\n    updateShelf = (value, book) => {\n        // updata book shelf apear in search page\n        this.setState((currentSatate) => ({\n            booksResult: currentSatate.booksResult.map((bs) => {\n              bs.id === book.id && (\n                bs.shelf = value\n              )\n              return bs\n            })\n        }))\n        // updata book shelf in server\n        BooksAPI.update(book, value)        \n        // get books apear in main page\n        BooksAPI.getAll().then((books) => {\n            this.setState((currentSatate) => ({\n                booksResult: currentSatate.booksResult.map((bs) => {\n                    books.map((b) => {\n                        b.id === bs.id && (\n                            bs = b\n                        )\n                        return b\n                    })\n                    return bs\n                })\n            }))\n            return books\n        }).then((books) => {\n            // updata book shelf in main page\n            this.props.setBooks(books)\n        })\n        \n    }\n\n    // show result depending on user input\n    updateQuery = (query, books) => {\n        this.setState(() =>  ({\n            query: query\n        }))\n        \n        if (query === '') this.setState(()=> ({booksResult: []}))\n        else     \n            BooksAPI.search(query)\n            .then((booksSearch) => {\n                if (Array.isArray(booksSearch))\n                    this.setState(() => ({\n                        booksResult: booksSearch.map((bs) => {\n                            books.map((b) => {\n                                b.id === bs.id && (\n                                    bs = b\n                                )\n                                return b\n                            })\n                            return bs\n                        })\n                    }))\n                else this.setState(()=> ({booksResult: []}))\n            })\n        \n    }\n    \n    render() {\n        const { booksResult, query } = this.state\n        let showingResult\n        if (query !== '') {\n            showingResult = booksResult\n        } else {\n            showingResult = []\n        }\n\n        return (\n            <div className=\"search-books\">\n                {/* input field */}\n                <div className=\"search-books-bar\">\n                    {/* back to main */}\n                    <Link \n                        to='/'\n                        className=\"close-search\"\n                    >\n                        <button></button>    \n                    </Link>\n                     {/* back to main */}\n\n                    <div className=\"search-books-input-wrapper\">\n                        <input\n                            type = \"text\" \n                            placeholder = \"Search by title or author\"\n                            value= {this.state.query}\n                            onChange = {(event) => this.updateQuery(event.target.value, this.props.books)}\n                        />\n                    </div>\n                </div>\n                {/* input field */}\n\n                {/* list of results */}\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {showingResult.map((book) => (\n                            <li key={book.id}>\n                                <div className=\"book\">\n                                    <div className=\"book-top\">\n                                        {book.imageLinks && (\n                                            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks.thumbnail})` }}></div>\n                                        )}\n                                        <div className=\"book-shelf-changer\">\n                                            <select value={book.shelf} onChange={(event) => this.updateShelf(event.target.value, book)}>\n                                                <option value=\"move\" disabled>Move to...</option>\n                                                <option value=\"currentlyReading\">Currently Reading</option>\n                                                <option value=\"wantToRead\">Want to Read</option>\n                                                <option value=\"read\">Read</option>\n                                                <option value=\"none\">None</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div className=\"book-title\">{book.title}</div>\n                                    <div className=\"book-authors\">\n                                        {book.authors && (\n                                            book.authors.map((author) => (\n                                                <div key={author}>{author}</div>\n                                            ))\n                                        )}\n                                    </div>\n                                </div>\n                            </li>\n                        ))}\n                    </ol>\n                </div>\n                {/* list of results */}\n            </div>\n        )\n    }\n}\n\nexport default SearchBooks;","import React from 'react'\nimport BookList from './BookList'\nimport SearchBooks from './SearchBooks'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport { Route } from 'react-router-dom'\n\nclass BooksApp extends React.Component {\n  \n  state = {\n    books: [],\n  }\n\n  componentDidMount() {\n    // get data from server\n    BooksAPI.getAll().then((books) => {\n      this.setState(() => ({\n        books: books\n      }))\n    })\n  }\n  \n  // change the book selfs for main page\n  updateShelf = (value, book) => {\n    this.setState((currentSatate) => ({\n      books: currentSatate.books.map((b) => {\n        b.id === book.id && (\n          b.shelf = value\n        )\n        return b\n      })\n    }))\n    // update book shelf in server\n    BooksAPI.update(book, value)\n  }\n  setBooks = (newBooks) => {\n    this.setState(() => ({\n      books: newBooks\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {/* main page */}\n        <Route exact path='/' render={ () => (\n          <BookList \n            books={this.state.books}\n            update={this.updateShelf}\n          />    \n        ) }/>\n        \n        {/* search page */}\n        <Route exact path='/search' render={ () => (\n          <SearchBooks\n            books = {this.state.books}\n            setBooks = {this.setBooks}\n          />      \n        ) }/>\n\n      </div>\n    )\n  }\n}\n\nexport default BooksApp;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root'))\n"],"sourceRoot":""}